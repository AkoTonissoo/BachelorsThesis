openHABitem = "item0002"
table <- getTableIdByName(openHABitem, con)
df = dbGetQuery( con, paste('select * from', table))
df$time <- as.POSIXlt( df$time)
# At this point we have read the humidity values into 'df'
# We can now start doing something with the data. E.g. find min/max/median/mean or apply some more interesting algorithms, plot, etc..
####### PLOT ##########
##PREFORMAT FOR NICE PLOT
library(dplyr)
library(lubridate)
dates <- data.frame(Date = df$time)
minute(dates$Date) <- 0
second(dates$Date) <- 0
hour(dates$Date) <- 12
dates <- distinct(dates) %>%
mutate(Label = paste(format(Date, "%a - %d.%m.%y")),
DateRound = Date)
hour(dates$DateRound) <- 0
############
ggplot(df, aes(df$time, df$value)) +
geom_point(aes(color = value)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
#scale_y_continuous(limits = c(300, 900)) +
scale_x_datetime(breaks = date_breaks("2 hour"),
minor_breaks = date_breaks("2 hour"),
#date_labels = "%b %d",
labels = function(x) paste(format(x, "%H"))) +
# Add the major labels as a geom, this does limit to the plot area so have to put them above axis
geom_text(data = dates, aes(x = dates$Date, label = dates$Label, y = min(df$value), vjust = -0.5),check_overlap = TRUE, size = 3.5) +  # Add vertical lines to separate the days visually
geom_vline(data = dates, aes(xintercept = as.numeric(dates$DateRound)),linetype = "longdash") +
ggtitle(openHABitem)+
theme_bw()+
theme(axis.text.x = element_text(size = 4))
close
con <- dbConnect(RSQLite::SQLite(), dbname="sqlite.db")
library(shiny); runApp('R/shinyapp/dashboard.r')
runApp('R/shinyapp/dashboard.r')
runApp('R/shinyapp/dashboard.r')
runApp('R/shinyapp/dashboard.r')
runApp('R/shinyapp/dashboard.r')
shiny::runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp()
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
library(highcharter)
library(DBI)
library(forecast)
library(lubridate)
library(ggpubr)
library(dplyr)
library(zoo)
library(DBI)
library(forecast)
library(lubridate)
cbind.fill <- function(...){
nm <- list(...)
nm <- lapply(nm, as.matrix)
n <- max(sapply(nm, nrow))
do.call(cbind, lapply(nm, function (x)
rbind(x, matrix(, n-nrow(x), ncol(x)))))
}
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
connectDB <- function(df, userinput){
index <- which(df$dbNames == userinput)
dbActivePath <- toString(df[index,]$paths)
req(userinput)
print(dbActivePath)
print(isLocalDB(dbActivePath))
if (isLocalDB(dbActivePath)) {
con2 <- dbConnect(RSQLite::SQLite(), dbname=dbActivePath)
return(con2)
}
else {
dbfile <- tempfile()
download.file(dbActivePath, dbfile, mode = "wb")
con2 <- dbConnect(RSQLite::SQLite(), dbname=dbfile)
dbListTables(con2)
return(con2)
}
}
getDBs <- function(...){
dbNames <- c()
paths <- c()
openfile <- file("dbloc.txt", "r")
while (TRUE) {
line = readLines(openfile, n = 1)
database <- strsplit(line, split = " - ")
if (length(line) == 0){
break
}
dbNames = c(dbNames, database[[1]][1])
paths = c(paths, database[[1]][2])
}
databases <- data.frame(dbNames, paths)
close(openfile)
return(databases)
}
isLocalDB <- function(path){
if (grepl("C:/", path)) {
return(TRUE)
}
else {
return(FALSE)
}
}
correlationData <- function(datatype) {
con <- dbConnect(RSQLite::SQLite(), dbname="C:/Users/Ako/Documents/R/sqlite.db")
if (equals(datatype,1)){
co2data <-  dbGetQuery(con, "select * from 'item0003'")
tempdata <-  dbGetQuery(con, "select * from 'item0004'")
noisedata <-  dbGetQuery(con, "select * from 'item0005'")
co2data <- Interpolate(co2data)
tempdata <- Interpolate(tempdata)
noisedata <- Interpolate(noisedata)
data <- data.frame(noise = noisedata$approx[1:nrow(noisedata)], temp = tempdata$approx[1:nrow(noisedata)], co2 = co2data$approx[1:nrow(noisedata)])
}
if (equals(datatype,2)){
co2data <-  dbGetQuery(con, "select * from 'item0003'")
tempdata <-  dbGetQuery(con, "select * from 'item0004'")
co2data <- Interpolate(co2data)
tempdata <- Interpolate(tempdata)
data <- data.frame(temp = tempdata$approx[1:nrow(tempdata)], co2 = co2data$approx[1:nrow(tempdata)])
}
return(data)
}
forecastData <- function(datatype) {
con <- dbConnect(RSQLite::SQLite(), dbname="C:/Users/Ako/Documents/R/sqlite.db")
if (equals(datatype,1)){
data <- dbGetQuery(con, "select * from 'item0003'")
data <- data.frame(time = data$time[(nrow(data)-1000):nrow(data)], value = data$value[(nrow(data)-1000):nrow(data)])
data <- Interpolate(data)
}
if (equals(datatype,2)){
data <- dbGetQuery(con, "select * from 'item0004'")
data <- data.frame(time = data$time[(nrow(data)-1000):nrow(data)], value = data$value[(nrow(data)-1000):nrow(data)])
data <- Interpolate(data)
}
if (equals(datatype,3)){
data <- dbGetQuery(con, "select * from 'item0005'")
data <- data.frame(time = data$time, value = data$value)
data <- Interpolate(data)
}
return(data)
}
getNumericTables <- function(con){
tables <- data.frame(dbListTables(con))
tables <- head(tables, nrow(tables)-2)
items <- data.frame(dbGetQuery( con,'select itemname from items'))
df <- data.frame(tables, items)
fittingTables <- c()
fittingItems <- c()
a <- 1
for (i in df[[1]]) {
if (is.numeric(head(dbReadTable(con, i)$value,1)[[1]])){
item <- df$itemname[[a]]
fittingTables <- c(fittingTables, i)
fittingItems <- c(fittingItems, item)
}
a <- a+1
}
df <- data.frame(fittingItems, fittingTables)
return(df)
}
Interpolate <- function(df){
df$time <- as.POSIXct(df$time)
len <- length(df$time)
start <- df$time[1]
end <- df$time[len]
ts <- seq(start, end, by = "10 min")
ts <- data.frame(time = ts)
df5 <- data.frame(time = seq(start, end, by = "10 min")) %>%
full_join(df, by = "time") %>%
mutate(approx = na.approx(value))
df5 <- df5 %>% group_by(time) %>% summarise_all(funs(first(.[!is.na(.)])))
df <- df5[complete.cases(df5), ]
return(df)
}
shinyServer(function(input, output, session) {
databases <- getDBs()
con3 <- reactive({
req(input$variable3)
val <- connectDB(databases,input$variable3)
return(val)
})
tables <- reactive({
req(con3())
tables <- getNumericTables(con3())
return(tables)
})
output$gauge1name <- renderText({input$variable4})
output$gauge2name <- renderText({input$variable4})
output$gauge3name <- renderText({input$variable4})
output$gauge4name <- renderText({input$variable4})
output$tableSelector <- renderUI({
invalidateLater(1000)
tables <- tables()
print(input$variable1)
selectInput(inputId = "variable1", "Select value to display in graph 1",  tables$fittingTables, selected = tables$fittingTables[[3]])
})
output$tableSelector2 <- renderUI({
tables <- tables()
selectInput("variable2", "Select value to display in graph 2",  tables$fittingTables, selected = tables$fittingTables[[3]])
})
output$tableSelector3 <- renderUI({
print(input$variable3)
selectInput("variable3", "Select database",  databases$dbNames[[2]])
})
output$tableSelector4 <- renderUI({
tables <- tables()
selectizeInput("variable4", "Select Gauges",  tables$fittingItems, options = list(maxItems = 4))
})
MemUsedC <- reactive({
con2 <- con3()
print(input$variable3)
value <- dbGetQuery(con2, paste('select * from', input$variable1))
return(value)
})
MemUsedC2 <- reactive({
con2 <- con3()
print(input$variable3)
value <- dbGetQuery(con2, paste('select * from', input$variable2))
dfDate <- data.frame(as.Date(value$time))
dfTime <- as.POSIXct(value$time)
print(head(3600*hour(dfTime)+60*minute(dfTime)+second(dfTime)))
#scale_y_datetime(format="%H:%M:%S")
return(value)
})
output$memoryc <- renderHighchart({
req(input$variable1)
df <- MemUsedC()
hc <- data.frame(time = df$time, value = df$value) %>%
hchart("line", hcaes(time, value))
hc$x$type <- "stock"
hc
})
output$memoryc2 <- renderHighchart({
req(input$variable2)
df <- MemUsedC2()
hc2 <- data.frame(time = df$time, value = df$value) %>%
hchart("scatter", hcaes(time, value)) %>%
hc_xAxis(type = "datetime")
hc2$x$type <- "stock"
hc2
})
###
### gauges
###
output$Gauge1 <- renderC3Gauge({
con2 <- con3()
df <- getNumericTables(con2)
invalidateLater(10000)
val <- dbGetQuery(con2, paste("select value from ",df$fittingTables[[1]]," order by time desc limit 1"))
C3Gauge(value = c(val$value))
})
output$Gauge2 <- renderC3Gauge({
con2 <- con3()
df <- getNumericTables(con2)
invalidateLater(10000)
val <- dbGetQuery(con2, paste("select value from ",df$fittingTables[[2]]," order by time desc limit 1"))
C3Gauge(value = c(val$value))
})
output$Gauge3 <- renderC3Gauge({
con2 <- con3()
df <- getNumericTables(con2)
invalidateLater(10000)
val <- dbGetQuery(con2, paste("select value from ",df$fittingTables[[3]]," order by time desc limit 1"))
C3Gauge(value = c(val$value))
})
output$Gauge4 <- renderC3Gauge({
con2 <- con3()
df <- getNumericTables(con2)
invalidateLater(10000)
val <- dbGetQuery(con2, paste("select value from ",df$fittingTables[[4]]," order by time desc limit 1"))
C3Gauge(value = c(val$value))
})
###########################################
output$forecast1 <- renderPlot({
data <-  forecastData(1)
start <- data$time[1]
data = ts(data[,3], start=start,frequency = 144)
ARIMAfit = auto.arima((data), D=1)
plot(forecast(ARIMAfit,h=144))
#summary(ARIMAfit)
})
output$forecast2 <- renderPlot({
data <-  forecastData(2)
start <- data$time[1]
data = ts(data[,3], start=start,frequency = 144)
ARIMAfit = auto.arima((data), D=1)
plot(forecast(ARIMAfit,h=144))
#summary(ARIMAfit)
})
output$forecast3 <- renderPlot({
data <-  forecastData(3)
start <- data$time[1]
data = ts(data[,3], start=start,frequency = 144)
ARIMAfit = auto.arima((data), D=1)
plot(forecast(ARIMAfit,h=144))
#summary(ARIMAfit)
})
output$correlation1 <- renderPlot({
data <- correlationData(1)
ggscatter(data, x = "noise", y = "temp",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson")
})
output$correlation2 <- renderPlot({
data <- correlationData(2)
ggscatter(data, x = "co2", y = "temp",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson")
})
output$correlation3 <- renderPlot({
data <- correlationData(1)
ggscatter(data, x = "noise", y = "co2",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson")
})
})
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('R/asd/C3_demo')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
shiny::runApp('Documents/bacheloor/Praktiline')
runApp('R/asd/C3_demo')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp()
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
install.packages("htmlwidgets")
install.packages("highcharter")
install.packages("forecast")
install.packages("dplyr")
install.packages("ggpubr")
install.packages("dplyr")
install.packages("zoo")
install.packages("shiny")
install.packages("DBI")
install.packages("RSQLite")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("highcharter")
install.packages("forecast")
install.packages("dplyr")
install.packages("ggpubr")
install.packages("dplyr")
install.packages("zoo")
install.packages("shiny")
install.packages("DBI")
install.packages("RSQLite")
shiny::runApp('Documents/bacheloor/Praktiline')
install.packages("C3")
install.packages("C3")
runApp('Documents/bacheloor/Praktiline')
install.packages("c3net")
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
install.packages("c3")
runApp('Documents/bacheloor/Praktiline')
updateR()
updateR()
install.packages("installr")
updateR()
library(installr)
updateR()
shiny::runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
shiny::runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
shiny::runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
runApp('Documents/bacheloor/Praktiline')
shiny::runApp('C:/Users/Ako/Desktop/Praktiline')
shiny::runApp('C:/Users/Ako/Desktop/Praktiline')
